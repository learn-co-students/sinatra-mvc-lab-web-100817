exit
new_text = text.split(/\W/)
new_text = text.split(/\w/)
text
new_text
      new_text.map{|x|piglatinize(x)}
      new_text.delete("")
  new_text = text.split(/\w/)
new_text
new_text.map{|x|piglatinize(x)}
new_text = text.split(/\w/).delete("")
text
exit
      "#{new_word[0]}" + "way"
      "#{new_word[1]}" + "#{new_word[0]}" + "ay"
      word="i"
      new_word
      "#{new_word[1]}" + "#{new_word[0]}" + "ay"
    else
      byebug
      "#{new_word[0]}" + "way"
    if new_word.first.downcase =~ /[aeiou]/
  new_word =  word.split(/([aeiou].*)/)
word = "until"
      "#{new_word[1]}" + "#{new_word[0]}" + "ay"
    else
      byebug
      "#{new_word[0]}" + "way"
    if new_word.first.downcase =~ /[aeiou]/
  new_word =  word.split(/([aeiou].*)/)
    end
      "#{new_word[1]}" + "#{new_word[0]}" + "ay"
    else
      byebug
      "#{new_word[0]}" + "way"
    if new_word.first.downcase =~ /[aeiou]/
    new_word =  word.split(/([aeiou].*)/)
    end
      "#{new_word[1]}" + "#{new_word[0]}" + "ay"
    else
      byebug
      "#{new_word[0]}" + "way"
    if new_word.first.downcase =~ /[aeiou]/
    new_word =  word.split(/([aeiou].*)/)
self.piglatinize
self
word.piglatinize
exit
"#{word[1]}" + "#{word[0]}" + "ay"
word =  text.split(/([aeiou].*)/)
text.split(/[aeiou].*)/)
word = text.split(/[aeiou].*)/)
    "#{word[1]}" + "#{word[0]}" + "ay"
  word = text.split(/[aeiou].*)/)
text.split(/([aeiou].*)/)
text
text.split("").reject{|x| rule1 =~ x}
text.split("").reject{|x| rule1 !=~ x}
rule1= /^[aeiou]/
rule
text.split("").reject{|x| rule1 !=~ x}
text.split("").reject{|x| rule1 =~ x}
text.split("")
text.split()
text.each_char{|c| puts c}
text.each_character{|c| puts c}
text.each{|c| puts c}
text[0]
text
text.scan(rule1)
rule1= /[aeiou]/
text.scan(rule1)
rule1= /^[aeiou]/
text.scan(rule1)
text
